initSidebarItems({"enum":[["BookOption","Structure for storing a book option"],["Error","Crowbook's error type"],["InfoLevel","The level of information to display to a logger#"],["Number","Numbering for a given chapter"],["Token","A single token representing a Markdown element.A Markdown document is, thus, a Vec of `Token`s."]],"struct":[["Book","A Book.Probably the central structure for of Crowbook, as it is the one that calls the other ones.It has the tasks of loading a configuration file, loading chapters and using `Parser`to parse them, and then calling various renderers (`HtmlRendrer`, `LatexRenderer`, `EpubRenderer` and/or `OdtRenderer`) to convert the AST into documents.Examples"],["BookOptions","Contains the options of a book."],["EpubRenderer","Renderer for EpubUses part of the HTML renderer"],["French","Implementation for french 'cleaning'"],["HtmlRenderer","Renders HTML document.Also used by `EpubRenderer`."],["LatexRenderer","LaTeX renderer"],["Logger","Logs info and warning message and choose whether to display them according to verbosity"],["OdtRenderer","Rendererer for ODTStill very experimental."],["Parser","A parser that reads markdown and convert it to AST (a vector of `Token`s)This AST can then be used by various renderes.As this Parser uses Pulldown-cmark's one, it should be able to parse most *valid* CommonMark variant of Markdown.Compared to other Markdown parser, it might fail more often on invalid code, e.g. footnotes references that are not defined anywhere.Examples"],["ResourceHandler","Resource Handler.Its task is to make sure that some resource (image, link) is available for the book and to list images used in Markdown files so they can be used for the book"]],"trait":[["Cleaner","Trait for cleaning a string. This trait should be called for text that is e.g. in a paragraph, a title, NOT for code blocks, hyperlinks and so on!"]],"type":[["Result",""]]});